#### wap_client - Wallet Client API

Description of class for man page.

Detailed discussion of the class, if any.

This is the class interface:

    //  Create a new wap_client
    //  Connect to server endpoint, with specified timeout in msecs (zero means wait    
    //  forever). Constructor succeeds if connection is successful. The caller may      
    //  specify its address.                                                            
    WAP_EXPORT wap_client_t *
        wap_client_new (const char *endpoint, int timeout, const char *address);
    
    //  Destroy the wap_client
    WAP_EXPORT void
        wap_client_destroy (wap_client_t **self_p);
    
    //  Enable verbose logging of client activity
    WAP_EXPORT void
        wap_client_verbose (wap_client_t *self);
    
    //  Return actor, when caller wants to work with multiple actors and/or
    //  input sockets asynchronously.
    WAP_EXPORT zactor_t *
        wap_client_actor (wap_client_t *self);
    
    //  Return message pipe for asynchronous message I/O. In the high-volume case,
    //  we send methods and get replies to the actor, in a synchronous manner, and
    //  we send/recv high volume message data to a second pipe, the msgpipe. In
    //  the low-volume case we can do everything over the actor pipe, if traffic
    //  is never ambiguous.
    WAP_EXPORT zsock_t *
        wap_client_msgpipe (wap_client_t *self);
    
    //  Request a set of blocks from the server.                                        
    //  Returns >= 0 if successful, -1 if interrupted.
    WAP_EXPORT int
        wap_client_blocks (wap_client_t *self);
    
    //  Return last received status
    WAP_EXPORT int 
        wap_client_status (wap_client_t *self);
    
    //  Return last received reason
    WAP_EXPORT const char *
        wap_client_reason (wap_client_t *self);
    
    //  Return last received start_height
    WAP_EXPORT int 
        wap_client_start_height (wap_client_t *self);
    
    //  Return last received curr_height
    WAP_EXPORT int 
        wap_client_curr_height (wap_client_t *self);
    
    //  Return last received block_status
    WAP_EXPORT const char *
        wap_client_block_status (wap_client_t *self);
    
    //  Return last received block_data
    WAP_EXPORT zmsg_t *
        wap_client_block_data (wap_client_t *self);
    
    //  Self test of this class
    WAP_EXPORT void
        wap_client_test (bool verbose);

This is the class self test code:

    zactor_t *client = zactor_new (wap_client, NULL);
    if (verbose)
        zstr_send (client, "VERBOSE");
    zactor_destroy (&client);

