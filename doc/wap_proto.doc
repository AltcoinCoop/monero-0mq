#### wap_proto - Wallet Access Protocol

wap_proto - Wallet Access Protocol

Please add @discuss section in ../src/wap_proto.c.

This is the class interface:

    //  Create a new empty wap_proto
    wap_proto_t *
        wap_proto_new (void);
    
    //  Destroy a wap_proto instance
    void
        wap_proto_destroy (wap_proto_t **self_p);
    
    //  Receive a wap_proto from the socket. Returns 0 if OK, -1 if
    //  there was an error. Blocks if there is no message waiting.
    int
        wap_proto_recv (wap_proto_t *self, zsock_t *input);
    
    //  Send the wap_proto to the output socket, does not destroy it
    int
        wap_proto_send (wap_proto_t *self, zsock_t *output);
        
    //  Print contents of message to stdout
    void
        wap_proto_print (wap_proto_t *self);
    
    //  Get/set the message routing id
    zframe_t *
        wap_proto_routing_id (wap_proto_t *self);
    void
        wap_proto_set_routing_id (wap_proto_t *self, zframe_t *routing_id);
    
    //  Get the wap_proto id and printable command
    int
        wap_proto_id (wap_proto_t *self);
    void
        wap_proto_set_id (wap_proto_t *self, int id);
    const char *
        wap_proto_command (wap_proto_t *self);
    
    //  Get/set the identity field
    const char *
        wap_proto_identity (wap_proto_t *self);
    void
        wap_proto_set_identity (wap_proto_t *self, const char *value);
    
    //  Get/set the block_ids field
    zlist_t *
        wap_proto_block_ids (wap_proto_t *self);
    //  Get the block_ids field and transfer ownership to caller
    zlist_t *
        wap_proto_get_block_ids (wap_proto_t *self);
    //  Set the block_ids field, transferring ownership from caller
    void
        wap_proto_set_block_ids (wap_proto_t *self, zlist_t **block_ids_p);
    
    //  Get/set the start_height field
    uint64_t
        wap_proto_start_height (wap_proto_t *self);
    void
        wap_proto_set_start_height (wap_proto_t *self, uint64_t start_height);
    
    //  Get/set the curr_height field
    uint64_t
        wap_proto_curr_height (wap_proto_t *self);
    void
        wap_proto_set_curr_height (wap_proto_t *self, uint64_t curr_height);
    
    //  Get/set the block_status field
    const char *
        wap_proto_block_status (wap_proto_t *self);
    void
        wap_proto_set_block_status (wap_proto_t *self, const char *value);
    
    //  Get a copy of the block_data field
    zmsg_t *
        wap_proto_block_data (wap_proto_t *self);
    //  Get the block_data field and transfer ownership to caller
    zmsg_t *
        wap_proto_get_block_data (wap_proto_t *self);
    //  Set the block_data field, transferring ownership from caller
    void
        wap_proto_set_block_data (wap_proto_t *self, zmsg_t **msg_p);
    
    //  Get a copy of the tx_data field
    zchunk_t *
        wap_proto_tx_data (wap_proto_t *self);
    //  Get the tx_data field and transfer ownership to caller
    zchunk_t *
        wap_proto_get_tx_data (wap_proto_t *self);
    //  Set the tx_data field, transferring ownership from caller
    void
        wap_proto_set_tx_data (wap_proto_t *self, zchunk_t **chunk_p);
    
    //  Get/set the tx_id field
    const char *
        wap_proto_tx_id (wap_proto_t *self);
    void
        wap_proto_set_tx_id (wap_proto_t *self, const char *value);
    
    //  Get/set the status field
    uint16_t
        wap_proto_status (wap_proto_t *self);
    void
        wap_proto_set_status (wap_proto_t *self, uint16_t status);
    
    //  Get/set the reason field
    const char *
        wap_proto_reason (wap_proto_t *self);
    void
        wap_proto_set_reason (wap_proto_t *self, const char *value);
    
    //  Self test of this class
    int
        wap_proto_test (bool verbose);

This is the class self test code:

    //  Simple create/destroy test
    wap_proto_t *self = wap_proto_new ();
    assert (self);
    wap_proto_destroy (&self);
    
    //  Create pair of sockets we can send through
    zsock_t *input = zsock_new (ZMQ_ROUTER);
    assert (input);
    zsock_connect (input, "inproc://selftest-wap_proto");
    
    zsock_t *output = zsock_new (ZMQ_DEALER);
    assert (output);
    zsock_bind (output, "inproc://selftest-wap_proto");
    
    //  Encode/send/decode and verify each message type
    int instance;
    self = wap_proto_new ();
    wap_proto_set_id (self, WAP_PROTO_OPEN);
    
    wap_proto_set_identity (self, "Life is short but Now lasts for ever");
    //  Send twice
    wap_proto_send (self, output);
    wap_proto_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        wap_proto_recv (self, input);
        assert (wap_proto_routing_id (self));
        assert (streq (wap_proto_identity (self), "Life is short but Now lasts for ever"));
    }
    wap_proto_set_id (self, WAP_PROTO_OPEN_OK);
    
    //  Send twice
    wap_proto_send (self, output);
    wap_proto_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        wap_proto_recv (self, input);
        assert (wap_proto_routing_id (self));
    }
    wap_proto_set_id (self, WAP_PROTO_BLOCKS);
    
    zlist_t *blocks_block_ids = zlist_new ();
    zlist_append (blocks_block_ids, "Name: Brutus");
    zlist_append (blocks_block_ids, "Age: 43");
    wap_proto_set_block_ids (self, &blocks_block_ids);
    //  Send twice
    wap_proto_send (self, output);
    wap_proto_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        wap_proto_recv (self, input);
        assert (wap_proto_routing_id (self));
        zlist_t *block_ids = wap_proto_get_block_ids (self);
        assert (zlist_size (block_ids) == 2);
        assert (streq ((char *) zlist_first (block_ids), "Name: Brutus"));
        assert (streq ((char *) zlist_next (block_ids), "Age: 43"));
        zlist_destroy (&block_ids);
    }
    wap_proto_set_id (self, WAP_PROTO_BLOCKS_OK);
    
    wap_proto_set_start_height (self, 123);
    wap_proto_set_curr_height (self, 123);
    wap_proto_set_block_status (self, "Life is short but Now lasts for ever");
    zmsg_t *blocks_ok_block_data = zmsg_new ();
    wap_proto_set_block_data (self, &blocks_ok_block_data);
    zmsg_addstr (wap_proto_block_data (self), "Hello, World");
    //  Send twice
    wap_proto_send (self, output);
    wap_proto_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        wap_proto_recv (self, input);
        assert (wap_proto_routing_id (self));
        assert (wap_proto_start_height (self) == 123);
        assert (wap_proto_curr_height (self) == 123);
        assert (streq (wap_proto_block_status (self), "Life is short but Now lasts for ever"));
        assert (zmsg_size (wap_proto_block_data (self)) == 1);
    }
    wap_proto_set_id (self, WAP_PROTO_PUT);
    
    zchunk_t *put_tx_data = zchunk_new ("Captcha Diem", 12);
    wap_proto_set_tx_data (self, &put_tx_data);
    //  Send twice
    wap_proto_send (self, output);
    wap_proto_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        wap_proto_recv (self, input);
        assert (wap_proto_routing_id (self));
        assert (memcmp (zchunk_data (wap_proto_tx_data (self)), "Captcha Diem", 12) == 0);
    }
    wap_proto_set_id (self, WAP_PROTO_PUT_OK);
    
    wap_proto_set_tx_id (self, "Life is short but Now lasts for ever");
    //  Send twice
    wap_proto_send (self, output);
    wap_proto_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        wap_proto_recv (self, input);
        assert (wap_proto_routing_id (self));
        assert (streq (wap_proto_tx_id (self), "Life is short but Now lasts for ever"));
    }
    wap_proto_set_id (self, WAP_PROTO_GET);
    
    wap_proto_set_tx_id (self, "Life is short but Now lasts for ever");
    //  Send twice
    wap_proto_send (self, output);
    wap_proto_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        wap_proto_recv (self, input);
        assert (wap_proto_routing_id (self));
        assert (streq (wap_proto_tx_id (self), "Life is short but Now lasts for ever"));
    }
    wap_proto_set_id (self, WAP_PROTO_GET_OK);
    
    zchunk_t *get_ok_tx_data = zchunk_new ("Captcha Diem", 12);
    wap_proto_set_tx_data (self, &get_ok_tx_data);
    //  Send twice
    wap_proto_send (self, output);
    wap_proto_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        wap_proto_recv (self, input);
        assert (wap_proto_routing_id (self));
        assert (memcmp (zchunk_data (wap_proto_tx_data (self)), "Captcha Diem", 12) == 0);
    }
    wap_proto_set_id (self, WAP_PROTO_SAVE);
    
    //  Send twice
    wap_proto_send (self, output);
    wap_proto_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        wap_proto_recv (self, input);
        assert (wap_proto_routing_id (self));
    }
    wap_proto_set_id (self, WAP_PROTO_SAVE_OK);
    
    //  Send twice
    wap_proto_send (self, output);
    wap_proto_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        wap_proto_recv (self, input);
        assert (wap_proto_routing_id (self));
    }
    wap_proto_set_id (self, WAP_PROTO_START);
    
    //  Send twice
    wap_proto_send (self, output);
    wap_proto_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        wap_proto_recv (self, input);
        assert (wap_proto_routing_id (self));
    }
    wap_proto_set_id (self, WAP_PROTO_START_OK);
    
    //  Send twice
    wap_proto_send (self, output);
    wap_proto_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        wap_proto_recv (self, input);
        assert (wap_proto_routing_id (self));
    }
    wap_proto_set_id (self, WAP_PROTO_STOP);
    
    //  Send twice
    wap_proto_send (self, output);
    wap_proto_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        wap_proto_recv (self, input);
        assert (wap_proto_routing_id (self));
    }
    wap_proto_set_id (self, WAP_PROTO_STOP_OK);
    
    //  Send twice
    wap_proto_send (self, output);
    wap_proto_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        wap_proto_recv (self, input);
        assert (wap_proto_routing_id (self));
    }
    wap_proto_set_id (self, WAP_PROTO_CLOSE);
    
    //  Send twice
    wap_proto_send (self, output);
    wap_proto_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        wap_proto_recv (self, input);
        assert (wap_proto_routing_id (self));
    }
    wap_proto_set_id (self, WAP_PROTO_CLOSE_OK);
    
    //  Send twice
    wap_proto_send (self, output);
    wap_proto_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        wap_proto_recv (self, input);
        assert (wap_proto_routing_id (self));
    }
    wap_proto_set_id (self, WAP_PROTO_ERROR);
    
    wap_proto_set_status (self, 123);
    wap_proto_set_reason (self, "Life is short but Now lasts for ever");
    //  Send twice
    wap_proto_send (self, output);
    wap_proto_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        wap_proto_recv (self, input);
        assert (wap_proto_routing_id (self));
        assert (wap_proto_status (self) == 123);
        assert (streq (wap_proto_reason (self), "Life is short but Now lasts for ever"));
    }
    
    wap_proto_destroy (&self);
    zsock_destroy (&input);
    zsock_destroy (&output);

